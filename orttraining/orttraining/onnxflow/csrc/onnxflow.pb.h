// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: onnxflow.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_onnxflow_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_onnxflow_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3018000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3018001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/any.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_onnxflow_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_onnxflow_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace onnxflow {
class OnnxFlowParameter;
struct OnnxFlowParameterDefaultTypeInternal;
extern OnnxFlowParameterDefaultTypeInternal _OnnxFlowParameter_default_instance_;
class OnnxFlowParameters;
struct OnnxFlowParametersDefaultTypeInternal;
extern OnnxFlowParametersDefaultTypeInternal _OnnxFlowParameters_default_instance_;
}  // namespace onnxflow
PROTOBUF_NAMESPACE_OPEN
template<> ::onnxflow::OnnxFlowParameter* Arena::CreateMaybeMessage<::onnxflow::OnnxFlowParameter>(Arena*);
template<> ::onnxflow::OnnxFlowParameters* Arena::CreateMaybeMessage<::onnxflow::OnnxFlowParameters>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace onnxflow {

// ===================================================================

class OnnxFlowParameter final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:onnxflow.OnnxFlowParameter) */ {
 public:
  inline OnnxFlowParameter() : OnnxFlowParameter(nullptr) {}
  ~OnnxFlowParameter() override;
  explicit constexpr OnnxFlowParameter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OnnxFlowParameter(const OnnxFlowParameter& from);
  OnnxFlowParameter(OnnxFlowParameter&& from) noexcept
    : OnnxFlowParameter() {
    *this = ::std::move(from);
  }

  inline OnnxFlowParameter& operator=(const OnnxFlowParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline OnnxFlowParameter& operator=(OnnxFlowParameter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const OnnxFlowParameter& default_instance() {
    return *internal_default_instance();
  }
  static inline const OnnxFlowParameter* internal_default_instance() {
    return reinterpret_cast<const OnnxFlowParameter*>(
               &_OnnxFlowParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(OnnxFlowParameter& a, OnnxFlowParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(OnnxFlowParameter* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OnnxFlowParameter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OnnxFlowParameter* New() const final {
    return new OnnxFlowParameter();
  }

  OnnxFlowParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OnnxFlowParameter>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const OnnxFlowParameter& from);
  void MergeFrom(const OnnxFlowParameter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(OnnxFlowParameter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onnxflow.OnnxFlowParameter";
  }
  protected:
  explicit OnnxFlowParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
    kRequiresGradFieldNumber = 2,
  };
  // required .google.protobuf.Any data = 1;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::PROTOBUF_NAMESPACE_ID::Any& data() const;
  PROTOBUF_MUST_USE_RESULT ::PROTOBUF_NAMESPACE_ID::Any* release_data();
  ::PROTOBUF_NAMESPACE_ID::Any* mutable_data();
  void set_allocated_data(::PROTOBUF_NAMESPACE_ID::Any* data);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Any& _internal_data() const;
  ::PROTOBUF_NAMESPACE_ID::Any* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::PROTOBUF_NAMESPACE_ID::Any* data);
  ::PROTOBUF_NAMESPACE_ID::Any* unsafe_arena_release_data();

  // required bool requires_grad = 2;
  bool has_requires_grad() const;
  private:
  bool _internal_has_requires_grad() const;
  public:
  void clear_requires_grad();
  bool requires_grad() const;
  void set_requires_grad(bool value);
  private:
  bool _internal_requires_grad() const;
  void _internal_set_requires_grad(bool value);
  public:

  // @@protoc_insertion_point(class_scope:onnxflow.OnnxFlowParameter)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::Any* data_;
  bool requires_grad_;
  friend struct ::TableStruct_onnxflow_2eproto;
};
// -------------------------------------------------------------------

class OnnxFlowParameters final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:onnxflow.OnnxFlowParameters) */ {
 public:
  inline OnnxFlowParameters() : OnnxFlowParameters(nullptr) {}
  ~OnnxFlowParameters() override;
  explicit constexpr OnnxFlowParameters(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OnnxFlowParameters(const OnnxFlowParameters& from);
  OnnxFlowParameters(OnnxFlowParameters&& from) noexcept
    : OnnxFlowParameters() {
    *this = ::std::move(from);
  }

  inline OnnxFlowParameters& operator=(const OnnxFlowParameters& from) {
    CopyFrom(from);
    return *this;
  }
  inline OnnxFlowParameters& operator=(OnnxFlowParameters&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const OnnxFlowParameters& default_instance() {
    return *internal_default_instance();
  }
  static inline const OnnxFlowParameters* internal_default_instance() {
    return reinterpret_cast<const OnnxFlowParameters*>(
               &_OnnxFlowParameters_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(OnnxFlowParameters& a, OnnxFlowParameters& b) {
    a.Swap(&b);
  }
  inline void Swap(OnnxFlowParameters* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OnnxFlowParameters* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OnnxFlowParameters* New() const final {
    return new OnnxFlowParameters();
  }

  OnnxFlowParameters* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OnnxFlowParameters>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const OnnxFlowParameters& from);
  void MergeFrom(const OnnxFlowParameters& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(OnnxFlowParameters* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onnxflow.OnnxFlowParameters";
  }
  protected:
  explicit OnnxFlowParameters(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParametersFieldNumber = 1,
  };
  // repeated .onnxflow.OnnxFlowParameter parameters = 1;
  int parameters_size() const;
  private:
  int _internal_parameters_size() const;
  public:
  void clear_parameters();
  ::onnxflow::OnnxFlowParameter* mutable_parameters(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onnxflow::OnnxFlowParameter >*
      mutable_parameters();
  private:
  const ::onnxflow::OnnxFlowParameter& _internal_parameters(int index) const;
  ::onnxflow::OnnxFlowParameter* _internal_add_parameters();
  public:
  const ::onnxflow::OnnxFlowParameter& parameters(int index) const;
  ::onnxflow::OnnxFlowParameter* add_parameters();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onnxflow::OnnxFlowParameter >&
      parameters() const;

  // @@protoc_insertion_point(class_scope:onnxflow.OnnxFlowParameters)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onnxflow::OnnxFlowParameter > parameters_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onnxflow_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// OnnxFlowParameter

// required .google.protobuf.Any data = 1;
inline bool OnnxFlowParameter::_internal_has_data() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || data_ != nullptr);
  return value;
}
inline bool OnnxFlowParameter::has_data() const {
  return _internal_has_data();
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& OnnxFlowParameter::_internal_data() const {
  const ::PROTOBUF_NAMESPACE_ID::Any* p = data_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Any&>(
      ::PROTOBUF_NAMESPACE_ID::_Any_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& OnnxFlowParameter::data() const {
  // @@protoc_insertion_point(field_get:onnxflow.OnnxFlowParameter.data)
  return _internal_data();
}
inline void OnnxFlowParameter::unsafe_arena_set_allocated_data(
    ::PROTOBUF_NAMESPACE_ID::Any* data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  data_ = data;
  if (data) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:onnxflow.OnnxFlowParameter.data)
}
inline ::PROTOBUF_NAMESPACE_ID::Any* OnnxFlowParameter::release_data() {
  _has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::Any* temp = data_;
  data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* OnnxFlowParameter::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:onnxflow.OnnxFlowParameter.data)
  _has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::Any* temp = data_;
  data_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* OnnxFlowParameter::_internal_mutable_data() {
  _has_bits_[0] |= 0x00000001u;
  if (data_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Any>(GetArenaForAllocation());
    data_ = p;
  }
  return data_;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* OnnxFlowParameter::mutable_data() {
  ::PROTOBUF_NAMESPACE_ID::Any* _msg = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:onnxflow.OnnxFlowParameter.data)
  return _msg;
}
inline void OnnxFlowParameter::set_allocated_data(::PROTOBUF_NAMESPACE_ID::Any* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data));
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:onnxflow.OnnxFlowParameter.data)
}

// required bool requires_grad = 2;
inline bool OnnxFlowParameter::_internal_has_requires_grad() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool OnnxFlowParameter::has_requires_grad() const {
  return _internal_has_requires_grad();
}
inline void OnnxFlowParameter::clear_requires_grad() {
  requires_grad_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool OnnxFlowParameter::_internal_requires_grad() const {
  return requires_grad_;
}
inline bool OnnxFlowParameter::requires_grad() const {
  // @@protoc_insertion_point(field_get:onnxflow.OnnxFlowParameter.requires_grad)
  return _internal_requires_grad();
}
inline void OnnxFlowParameter::_internal_set_requires_grad(bool value) {
  _has_bits_[0] |= 0x00000002u;
  requires_grad_ = value;
}
inline void OnnxFlowParameter::set_requires_grad(bool value) {
  _internal_set_requires_grad(value);
  // @@protoc_insertion_point(field_set:onnxflow.OnnxFlowParameter.requires_grad)
}

// -------------------------------------------------------------------

// OnnxFlowParameters

// repeated .onnxflow.OnnxFlowParameter parameters = 1;
inline int OnnxFlowParameters::_internal_parameters_size() const {
  return parameters_.size();
}
inline int OnnxFlowParameters::parameters_size() const {
  return _internal_parameters_size();
}
inline void OnnxFlowParameters::clear_parameters() {
  parameters_.Clear();
}
inline ::onnxflow::OnnxFlowParameter* OnnxFlowParameters::mutable_parameters(int index) {
  // @@protoc_insertion_point(field_mutable:onnxflow.OnnxFlowParameters.parameters)
  return parameters_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onnxflow::OnnxFlowParameter >*
OnnxFlowParameters::mutable_parameters() {
  // @@protoc_insertion_point(field_mutable_list:onnxflow.OnnxFlowParameters.parameters)
  return &parameters_;
}
inline const ::onnxflow::OnnxFlowParameter& OnnxFlowParameters::_internal_parameters(int index) const {
  return parameters_.Get(index);
}
inline const ::onnxflow::OnnxFlowParameter& OnnxFlowParameters::parameters(int index) const {
  // @@protoc_insertion_point(field_get:onnxflow.OnnxFlowParameters.parameters)
  return _internal_parameters(index);
}
inline ::onnxflow::OnnxFlowParameter* OnnxFlowParameters::_internal_add_parameters() {
  return parameters_.Add();
}
inline ::onnxflow::OnnxFlowParameter* OnnxFlowParameters::add_parameters() {
  ::onnxflow::OnnxFlowParameter* _add = _internal_add_parameters();
  // @@protoc_insertion_point(field_add:onnxflow.OnnxFlowParameters.parameters)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onnxflow::OnnxFlowParameter >&
OnnxFlowParameters::parameters() const {
  // @@protoc_insertion_point(field_list:onnxflow.OnnxFlowParameters.parameters)
  return parameters_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace onnxflow

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_onnxflow_2eproto
